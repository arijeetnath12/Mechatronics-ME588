// Wiring for Arduino Uno as follows:
// MOSI = pin 11, MISO = 12, SCK = 13)
// Wiring for Arduino Mega as follows:
// MOSI = pin 51, MISO = 50, SCK = 52)
// Other pins are configurable below

#include <Adafruit_GFX.h>         // Core graphics library
#include <Adafruit_ST7789.h>      // Hardware-specific library for ST7789
#include <SdFat.h>                // SD card & FAT filesystem library
#include <Adafruit_SPIFlash.h>    // SPI / QSPI flash library
#include <Adafruit_ImageReader.h> // Image-reading functions
#include <Adafruit_NeoPixel.h>    // For LED Strip
#define LED_PIN 31
#define LED_COUNT 8
Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRBW + NEO_KHZ800);

// Load from SD card:
#define USE_SD_CARD

// TFT display and SD card share the hardware SPI interface, using
// 'select' pins for each to identify the active device on the bus.
#define SD_CS    53   // SD card select pin
#define TFT_CS  49   // TFT select pin
#define TFT_DC   45   // TFT display/command pin
#define TFT_RST  47   // Or set to -1 and connect to Arduino RESET pin

// Define all pins needed for the LED buttons and capacitive touch sensor
int capTouch = 33;
int redButton = 24;
int greenButton = 26;
int blueButton = 28;
int redLED = 43;
int greenLED = 41;
int blueLED = 39;

// Define finite state names and associated integer values
const int WAIT = 101;
const int RESET = 102;
const int RED = 103;
const int GREEN = 104;
const int BLUE = 105;
const int DONE = 106;
const int HOME = 107;
int FSM_State = HOME;

// Count variable used 
int block = 0;
// Variables to hold current color for LED Strip
int red = 0;
int green = 0;
int blue = 0;
// Target color selection flag
int color = 0;
// Blocks dropped of target color
int dropped = 0;

// Define 15x2 array containing all x-y coordinate positions on LCD screen for arena mapping purposes
int mapping[15][2] = {
  {182,124},
  {182,66},
  {182,8},
  {124,8},
  {66,8},
  {8,8},
  {8,66},
  {8,124},
  {8,182},
  {66,182},
  {66,124},
  {66,66},
  {124,66},
  {124,124},
  {124,182}};

#if defined(USE_SD_CARD)
  SdFat                SD;         // SD card filesystem
  Adafruit_ImageReader reader(SD); // Image-reader object, pass in SD filesys
#else
  // SPI or QSPI flash filesystem (i.e. CIRCUITPY drive)
  #if defined(__SAMD51__) || defined(NRF52840_XXAA)
    Adafruit_FlashTransport_QSPI flashTransport(PIN_QSPI_SCK, PIN_QSPI_CS,
      PIN_QSPI_IO0, PIN_QSPI_IO1, PIN_QSPI_IO2, PIN_QSPI_IO3);
  #else
    #if (SPI_INTERFACES_COUNT == 1)
      Adafruit_FlashTransport_SPI flashTransport(SS, &SPI);
    #else
      Adafruit_FlashTransport_SPI flashTransport(SS1, &SPI1);
    #endif
  #endif
  Adafruit_SPIFlash    flash(&flashTransport);
  FatFileSystem        filesys;
  Adafruit_ImageReader reader(filesys); // Image-reader, pass in flash filesys
#endif

Adafruit_ST7789      tft    = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);
Adafruit_Image       img;        // An image loaded into RAM
int32_t              width  = 0, // BMP image dimensions
                     height = 0;

void setup(void) {

  //Set modes of all digital pins
  pinMode(capTouch, INPUT);
  pinMode(redButton, INPUT);
  pinMode(greenButton, INPUT);
  pinMode(blueButton, INPUT);
  pinMode(redLED, OUTPUT);
  pinMode(greenLED, OUTPUT);
  pinMode(blueLED, OUTPUT);

  ImageReturnCode stat; // Status from image-reading functions

  Serial.begin(9600);
  
  // LED setup 
  strip.begin();
  strip.show();               //Initialize all pixels to 'off'
  strip.setBrightness(75);   //Default LED brightness from 0-255
  
#if !defined(ESP32)
  while(!Serial);       // Wait for Serial Monitor before continuing
#endif

  tft.init(240, 240);           // Init ST7789 240x240

  // The Adafruit_ImageReader constructor call (above, before setup())
  // accepts an uninitialized SdFat or FatFileSystem object. This MUST
  // BE INITIALIZED before using any of the image reader functions!
  Serial.print(F("Initializing filesystem..."));
#if defined(USE_SD_CARD)
  // SD card is pretty straightforward, a single call...
  if(!SD.begin(SD_CS, SD_SCK_MHZ(10))) { // Breakouts require 10 MHz limit due to longer wires
    Serial.println(F("SD begin() failed"));
    for(;;); // Fatal error, do not continue
  }
#else
  // SPI or QSPI flash requires two steps, one to access the bare flash
  // memory itself, then the second to access the filesystem within...
  if(!flash.begin()) {
    Serial.println(F("flash begin() failed"));
    for(;;);
  }
  if(!filesys.begin(&flash)) {
    Serial.println(F("filesys begin() failed"));
    for(;;);
  }
#endif
  Serial.println(F("OK!"));
  
  // Rotate screen orientation to correct orientation
  tft.setRotation(2);

}

// Debounce function for momentary pushbuttons
int debounce(int pin)
{
  int pinVal1 = 0;
  int pinVal2 = 0;

  pinVal1 = digitalRead(pin);
  delay(5);
  pinVal2 = digitalRead(pin);

  if(pinVal1 == pinVal2){
    return pinVal1;
  }
  else{
    return 0;
  }
}

// Function to add red colored square to LCD screen
void addRed(int xcoord, int ycoord)
{
  reader.drawBMP("/Red50.bmp", tft, xcoord, ycoord);
  delay(250);
  return;
}

// Function to add green colored square to LCD screen
void addGreen(int xcoord, int ycoord)
{
  reader.drawBMP("/Green50.bmp", tft, xcoord, ycoord);
  delay(250);
  return;
}

// Function to add blue colored square to LCD screen
void addBlue(int xcoord, int ycoord)
{
  reader.drawBMP("/Blue50.bmp", tft, xcoord, ycoord);
  delay(250);
  return;
}

void loop() {
  switch(FSM_State){
    case RESET:
      strip.clear();
      strip.setPixelColor(0, 0, 0, 0, 127);
      strip.setPixelColor(1, red, green, blue, 0);
      strip.show();
      digitalWrite(redLED, LOW);
      digitalWrite(greenLED, LOW);
      digitalWrite(blueLED, LOW);
      
      block = 0;
      dropped = 0;
      tft.fillScreen(ST77XX_BLACK);
      reader.drawBMP("/White50.bmp", tft, 182, 182);
      FSM_State = WAIT;
    break;
    
    case WAIT:
      strip.setPixelColor(0, 0, 0, 0, 127);
      strip.setPixelColor(1, red, green, blue, 0);
      strip.show();
      digitalWrite(redLED, LOW);
      digitalWrite(greenLED, LOW);
      digitalWrite(blueLED, LOW);
    
      if (block == 15){
        FSM_State = DONE;
      }
      else{
        if(digitalRead(capTouch)){
          FSM_State = RESET;
        }
        else{
          if(debounce(redButton)){
            FSM_State = RED;
          }
          else if(debounce(greenButton)){
            FSM_State = GREEN;
          }
          else if(debounce(blueButton)){
            FSM_State = BLUE;
          }
          else{
            FSM_State = WAIT;
          }
        }
      }
    break;

    case RED:
      strip.setPixelColor(0, 0, 0, 0, 127);
      strip.setPixelColor(1, red, green, blue, 0);
      strip.show();
      digitalWrite(redLED, HIGH);
      digitalWrite(greenLED, LOW);
      digitalWrite(blueLED, LOW);
      addRed(mapping[block][0], mapping[block][1]);
      block = block + 1;
      if(dropped < 5){
        if(red){
        strip.setPixelColor((7-dropped), red, green, blue, 0);
        dropped = dropped + 1;
        }
      }

  
      FSM_State = WAIT;
    break;

    case GREEN:
      strip.setPixelColor(0, 0, 0, 0, 127);
      strip.setPixelColor(1, red, green, blue, 0);
      strip.show();
      digitalWrite(redLED, LOW);
      digitalWrite(greenLED, HIGH);
      digitalWrite(blueLED, LOW);
      addGreen(mapping[block][0], mapping[block][1]);
      block = block + 1;
      if(dropped < 5){
        if(green){
        strip.setPixelColor((7-dropped), red, green, blue, 0);
        dropped = dropped + 1;
        }
      }
  
      FSM_State = WAIT;
    break;

    case BLUE:
      strip.setPixelColor(0, 0, 0, 0, 127);
      strip.setPixelColor(1, red, green, blue, 0);
      strip.show();
      digitalWrite(redLED, LOW);
      digitalWrite(greenLED, LOW);
      digitalWrite(blueLED, HIGH);
      addBlue(mapping[block][0], mapping[block][1]);
      block = block + 1;
      if(dropped < 5){
        if(blue){
        strip.setPixelColor((7-dropped), red, green, blue, 0);
        dropped = dropped + 1;
        }
      }
  
      FSM_State = WAIT;
    break;

    case DONE:
      delay(5000); // Pause 5 seconds before wiping screen and starting over
      strip.clear();
      strip.show();
      digitalWrite(redLED, LOW);
      digitalWrite(greenLED, LOW);
      digitalWrite(blueLED, LOW);
      color = 0;
      red = 0;
      green = 0;
      blue = 0;
      dropped = 0;
      
      reader.drawBMP("/purdue1.bmp", tft, 0, 0);
      delay(3000);  // Pause to credit Purdue Mechanical Engineering

      FSM_State = HOME;
    break;

    case HOME:
      strip.setPixelColor(1, red, green, blue, 0);
      strip.show();
      reader.drawBMP("/Assem1.bmp", tft, 0, 0);

      if(color != 0){
        if(digitalRead(capTouch)){
          FSM_State = RESET;
        }
        else{
          if(debounce(redButton)){
          digitalWrite(redLED, HIGH);
          digitalWrite(greenLED, LOW);
          digitalWrite(blueLED, LOW);
          red = 255;
          green = 0;
          blue = 0;
          strip.setPixelColor(1, red, green, blue, 0);
          strip.show();
          color = 1;
          }
          else if(debounce(greenButton)){
            digitalWrite(redLED, LOW);
            digitalWrite(greenLED, HIGH);
            digitalWrite(blueLED, LOW);
            red = 0;
            green = 255;
            blue = 0;
            strip.setPixelColor(1, red, green, blue, 0);
            strip.show();
            color = 1;
          }
          else if(debounce(blueButton)){
            digitalWrite(redLED, LOW);
            digitalWrite(greenLED, LOW);
            digitalWrite(blueLED, HIGH);
            red = 0;
            green = 0;
            blue = 255;
            strip.setPixelColor(1, red, green, blue, 0);
            strip.show();
            color = 1;
          }
          else{
            FSM_State = HOME;
          }
        }
      }
      else{
        if(debounce(redButton)){
          digitalWrite(redLED, HIGH);
          digitalWrite(greenLED, LOW);
          digitalWrite(blueLED, LOW);
          red = 255;
          green = 0;
          blue = 0;
          strip.setPixelColor(1, red, green, blue, 0);
          strip.show();
          color = 1;
          }
        else if(debounce(greenButton)){
          digitalWrite(redLED, LOW);
          digitalWrite(greenLED, HIGH);
          digitalWrite(blueLED, LOW);
          red = 0;
          green = 255;
          blue = 0;
          strip.setPixelColor(1, red, green, blue, 0);
          strip.show();
          color = 1;
        }
        else if(debounce(blueButton)){
          digitalWrite(redLED, LOW);
          digitalWrite(greenLED, LOW);
          digitalWrite(blueLED, HIGH);
          red = 0;
          green = 0;
          blue = 255;
          strip.setPixelColor(1, red, green, blue, 0);
          strip.show();
          color = 1;
       }
      }
    break;
  }
}
